Tweaks I intend on doing to this package:
- Stop using IsoAlternative and go for just Alternative. Types seem similar.
    - Is the applicative f restrition too much?
    --- The | combinator
        has been generalized in the standard Alternative type class. But
        Alternative declares a superclass constraint to Applicative, which
        is not suitable for syntax descriptions. We therefore need a version
        of Alternative which is superclass independent.
    -- whatever the case may be. It's super useful to put all isoAlternative combinators into a isoalternative file!
    --

- Simplify Ext and remove it.

- simplify parsers and printers implementations. put them in a more specific place.
    - could printers and parsers be generalized??

- Maybe Text.syntax.poly.class should be moved elsewhere?
- move any combinators that dont need Isofunctor,isoproduct,etc to go out!
- move each typeclass into it's file. Define the combinators of it there!

-- better invertiblesyntax typeclassings
- https://blog.poisson.chat/posts/2016-10-18-typeclass-interface.html 
-- why is lazyMaybe not implemented through the "naive" parser?



- BIG VALUE CHANGE: Implement "list" operator in syntax, to allow performance gains and implementing "text" and "bytestring" parsers


- no more imports as the deciding factor
-- things like parser instances could be imported or not? nonsense. make the parsing type and define it like so!

-- TryAlternative was deprecated. I don't think we'd ever want to have the possibility of "no-backtracking" being useful. So it's not.


- make the "runAsParser" stuff just go to generic and be defined there, implemented everywhere like it is



Cool and all but by using string you've just broken the "this" function. Which is pretty essential.
This doesn't work for multi tokens... And I think I should make everything work for multi-tokens and disregard the single token case

I think switching fom "token" function, to the attoparsec functions is the right call:
- string :: a -> delta () (try consume characters/ print those characters)
-- TODO: here Char could be stripped out, but since it's common in String and Text... I'll keep it for now...
- takeWhile :: (Char -> Bool) -> delta a (take while pred doesn't fail. Printer would take )(would substitute the "subset" usage which is akward currently)
  -? how would the printer work here???, anyways this is jut manyUntil

Hold on, since I'm not selling on not using token type anymore, since attoparsec still uses Word8... maybe I'll keep token
hardcoded to char for now?
- token :: Char 



-- New todos:
- figure out how "string" addon would work
- figure out how syntaxError should be better encoded into the types. Probably not leave it to monadfail
- Disable hoogle that shits expensive here in the papel flake

- Could really add a syntaxError thing to "this", would make it much better!


-- should get some convention for counterpart combinators that return input vs not returning, then build a list operator that does.
    -- should also make convention for things like cons that have a base operator, on what the naming is for the iso version. Possibly consI, eitherI etc?


- TODO: someUntil tests!!!